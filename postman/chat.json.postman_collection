{
	"info": {
		"_postman_id": "9c9fa78c-9c4d-452e-afcd-1c6dc3f065fc",
		"name": "movie-guru-chat",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "7776509"
	},
	"item": [
		{
			"name": "login",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{movie-guru-server}}/login",
					"protocol": "http",
					"host": [
						"{{movie-guru-server}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "clearHistory",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{movie-guru-server}}/history",
					"protocol": "http",
					"host": [
						"{{movie-guru-server}}"
					],
					"path": [
						"history"
					]
				}
			},
			"response": []
		},
		{
			"name": "chat_agent",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const userStartingMessages = [",
							"\"hello\",",
							"  \"Can you recommend a good action movie?\",",
							"  \"I'm looking for a movie with strong female characters. Any suggestions?\",",
							"  \"What are some action movies that most people haven't heard of?\",",
							"  \"Tell me about the best sci-fi movies of all time.\",",
							"  \"What are some movies that make you think?\",",
							"  \"I need a good laugh. Got any funny movie recommendations?\",",
							"  \"What's a movie that everyone loves but you don't?\",",
							"  \"What's your take on the latest movies?\",",
							"  \"Can you suggest a movie that's similar to [Movie Title]?\",",
							"  \"I'm in the mood for a classic horror film. Any ideas?\"",
							"];",
							"",
							"function getRandomUserStartingMessage() {",
							"  const randomIndex = Math.floor(Math.random() * userStartingMessages.length);",
							"  return userStartingMessages[randomIndex];",
							"}",
							"",
							"// Get a random starting message from a user",
							"const message = getRandomUserStartingMessage();",
							"pm.collectionVariables.set(\"mock_user_message\", message)"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"function sanitizeMarkdown(markdownString) {",
							"  // Remove or escape control characters like \\r, \\n, \\f, etc.",
							"  return markdownString.replace(/[\\r\\n\\f\\v\\b]/g, ''); ",
							"}",
							"function markdownToPlainText(markdownString) {",
							"  let plainText = markdownString;",
							"",
							"  // Remove headings",
							"  plainText = plainText.replace(/^#+\\s/gm, '');",
							"",
							"  // Remove bold and italics",
							"  plainText = plainText.replace(/\\*\\*([^*]+)\\*\\*/g, '$1'); // Bold",
							"  plainText = plainText.replace(/\\*([^*]+)\\*/g, '$1');   // Italics",
							"",
							"  // Remove code blocks",
							"  plainText = plainText.replace(/```[\\s\\S]*?```/g, '');",
							"  plainText = plainText.replace(/`[^`]+`/g, '$1');",
							"",
							"  // Remove links",
							"  plainText = plainText.replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1');",
							"",
							"  return plainText;",
							"}",
							"",
							"let jsonData = pm.response.json();",
							"let sanitizedMarkdown = sanitizeMarkdown(jsonData.answer)",
							"const plainTextAnswer = markdownToPlainText(sanitizedMarkdown);",
							"",
							"pm.collectionVariables.set(\"agent_response\", plainTextAnswer);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\":\"{{mock_user_message}}\"\n    \n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{movie-guru-server}}/chat",
					"protocol": "http",
					"host": [
						"{{movie-guru-server}}"
					],
					"path": [
						"chat"
					]
				}
			},
			"response": []
		},
		{
			"name": "mock-user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const RESPONSE_MOOD = [",
							"  'POSITIVE',",
							"  'NEGATIVE',",
							"  'NEUTRAL',",
							"  'RANDOM',",
							"];",
							"",
							"const RESPONSE_TYPE = [",
							"  'DIVE_DEEP',",
							"  'CHANGE_TOPIC',",
							"  'END_CONVERSATION',",
							"  'CONTINUE',",
							"  'RANDOM'",
							"];",
							"",
							"function getRandomResponse() {",
							"  const mood = getRandomValueFromArray(RESPONSE_MOOD);",
							"  const type = getRandomValueFromArray(RESPONSE_TYPE);",
							"  return { mood, type };",
							"}",
							"",
							"function getRandomValueFromArray(array) {",
							"  const randomIndex = Math.floor(Math.random() * array.length);",
							"  return array[randomIndex];",
							"}",
							"",
							"const response = getRandomResponse();",
							"pm.variables.set(\"response_mood\", response.mood);",
							"pm.variables.set(\"response_type\", response.type);"						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"mock_user_message\", jsonData.result.answer);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n    \"expert_answer\": \"{{agent_response}}\",\n    \"response_mood\": \"{{response_mood}}\",\n    \"response_type\": \"{{response_type}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{mock-user-server}}/dummyUserFlow",
					"protocol": "http",
					"host": [
						"{{mock-user-server}}"
					],
					"path": [
						"dummyUserFlow"
					]
				}
			},
			"response": []
		},
		{
			"name": "chat_agent2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function sanitizeMarkdown(markdownString) {",
							"  // Remove or escape control characters like \\r, \\n, \\f, etc.",
							"  return markdownString.replace(/[\\r\\n\\f\\v\\b]/g, ''); ",
							"}",
							"function markdownToPlainText(markdownString) {",
							"  let plainText = markdownString;",
							"",
							"  // Remove headings",
							"  plainText = plainText.replace(/^#+\\s/gm, '');",
							"",
							"  // Remove bold and italics",
							"  plainText = plainText.replace(/\\*\\*([^*]+)\\*\\*/g, '$1'); // Bold",
							"  plainText = plainText.replace(/\\*([^*]+)\\*/g, '$1');   // Italics",
							"",
							"  // Remove code blocks",
							"  plainText = plainText.replace(/```[\\s\\S]*?```/g, '');",
							"  plainText = plainText.replace(/`[^`]+`/g, '$1');",
							"",
							"  // Remove links",
							"  plainText = plainText.replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1');",
							"",
							"  return plainText;",
							"}",
							"",
							"let jsonData = pm.response.json();",
							"let sanitizedMarkdown = sanitizeMarkdown(jsonData.answer)",
							"const plainTextAnswer = markdownToPlainText(sanitizedMarkdown);",
							"",
							"pm.collectionVariables.set(\"agent_response\", plainTextAnswer);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\":\"{{mock_user_message}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{movie-guru-server}}/chat",
					"protocol": "http",
					"host": [
						"{{movie-guru-server}}"
					],
					"path": [
						"chat"
					]
				}
			},
			"response": []
		},
		{
			"name": "mock-user2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const RESPONSE_MOOD = [",
							"  'POSITIVE',",
							"  'NEGATIVE',",
							"  'NEUTRAL',",
							"  'RANDOM',",
							"];",
							"",
							"const RESPONSE_TYPE = [",
							"  'DIVE_DEEP',",
							"  'CHANGE_TOPIC',",
							"  'END_CONVERSATION',",
							"  'CONTINUE',",
							"  'RANDOM'",
							"];",
							"",
							"function getRandomResponse() {",
							"  const mood = getRandomValueFromArray(RESPONSE_MOOD);",
							"  const type = getRandomValueFromArray(RESPONSE_TYPE);",
							"  return { mood, type };",
							"}",
							"",
							"function getRandomValueFromArray(array) {",
							"  const randomIndex = Math.floor(Math.random() * array.length);",
							"  return array[randomIndex];",
							"}",
							"",
							"const response = getRandomResponse();",
							"pm.variables.set(\"response_mood\", response.mood);",
							"pm.variables.set(\"response_type\", response.type);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"mock_user_message\", jsonData.result.answer);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n    \"expert_answer\": \"{{agent_response}}\",\n    \"response_mood\": \"{{response_mood}}\",\n    \"response_type\": \"{{response_type}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{mock-user-server}}/dummyUserFlow",
					"protocol": "http",
					"host": [
						"{{mock-user-server}}"
					],
					"path": [
						"dummyUserFlow"
					]
				}
			},
			"response": []
		},
		{
			"name": "chat_agent3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function sanitizeMarkdown(markdownString) {",
							"  // Remove or escape control characters like \\r, \\n, \\f, etc.",
							"  return markdownString.replace(/[\\r\\n\\f\\v\\b]/g, ''); ",
							"}",
							"function markdownToPlainText(markdownString) {",
							"  let plainText = markdownString;",
							"",
							"  // Remove headings",
							"  plainText = plainText.replace(/^#+\\s/gm, '');",
							"",
							"  // Remove bold and italics",
							"  plainText = plainText.replace(/\\*\\*([^*]+)\\*\\*/g, '$1'); // Bold",
							"  plainText = plainText.replace(/\\*([^*]+)\\*/g, '$1');   // Italics",
							"",
							"  // Remove code blocks",
							"  plainText = plainText.replace(/```[\\s\\S]*?```/g, '');",
							"  plainText = plainText.replace(/`[^`]+`/g, '$1');",
							"",
							"  // Remove links",
							"  plainText = plainText.replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1');",
							"",
							"  return plainText;",
							"}",
							"",
							"let jsonData = pm.response.json();",
							"let sanitizedMarkdown = sanitizeMarkdown(jsonData.answer)",
							"const plainTextAnswer = markdownToPlainText(sanitizedMarkdown);",
							"",
							"pm.collectionVariables.set(\"agent_response\", plainTextAnswer);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\":\"{{mock_user_message}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{movie-guru-server}}/chat",
					"protocol": "http",
					"host": [
						"{{movie-guru-server}}"
					],
					"path": [
						"chat"
					]
				}
			},
			"response": []
		},
		{
			"name": "mock-user3",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const RESPONSE_MOOD = [",
							"  'POSITIVE',",
							"  'NEGATIVE',",
							"  'NEUTRAL',",
							"  'RANDOM',",
							"];",
							"",
							"const RESPONSE_TYPE = [",
							"  'DIVE_DEEP',",
							"  'CHANGE_TOPIC',",
							"  'END_CONVERSATION',",
							"  'CONTINUE',",
							"  'RANDOM'",
							"];",
							"",
							"function getRandomResponse() {",
							"  const mood = getRandomValueFromArray(RESPONSE_MOOD);",
							"  const type = getRandomValueFromArray(RESPONSE_TYPE);",
							"  return { mood, type };",
							"}",
							"",
							"function getRandomValueFromArray(array) {",
							"  const randomIndex = Math.floor(Math.random() * array.length);",
							"  return array[randomIndex];",
							"}",
							"",
							"const response = getRandomResponse();",
							"pm.variables.set(\"response_mood\", response.mood);",
							"pm.variables.set(\"response_type\", response.type);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData = pm.response.json();",
							"pm.collectionVariables.set(\"mock_user_message\", jsonData.result.answer);",
							"",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"data\": {\n    \"expert_answer\": \"{{agent_response}}\",\n    \"response_mood\": \"{{response_mood}}\",\n    \"response_type\": \"{{response_type}}\"\n  }\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{mock-user-server}}/dummyUserFlow",
					"protocol": "http",
					"host": [
						"{{mock-user-server}}"
					],
					"path": [
						"dummyUserFlow"
					]
				}
			},
			"response": []
		},
		{
			"name": "chat_agent4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"function sanitizeMarkdown(markdownString) {",
							"  // Remove or escape control characters like \\r, \\n, \\f, etc.",
							"  return markdownString.replace(/[\\r\\n\\f\\v\\b]/g, ''); ",
							"}",
							"function markdownToPlainText(markdownString) {",
							"  let plainText = markdownString;",
							"",
							"  // Remove headings",
							"  plainText = plainText.replace(/^#+\\s/gm, '');",
							"",
							"  // Remove bold and italics",
							"  plainText = plainText.replace(/\\*\\*([^*]+)\\*\\*/g, '$1'); // Bold",
							"  plainText = plainText.replace(/\\*([^*]+)\\*/g, '$1');   // Italics",
							"",
							"  // Remove code blocks",
							"  plainText = plainText.replace(/```[\\s\\S]*?```/g, '');",
							"  plainText = plainText.replace(/`[^`]+`/g, '$1');",
							"",
							"  // Remove links",
							"  plainText = plainText.replace(/\\[([^\\]]+)\\]\\([^)]+\\)/g, '$1');",
							"",
							"  return plainText;",
							"}",
							"",
							"let jsonData = pm.response.json();",
							"let sanitizedMarkdown = sanitizeMarkdown(jsonData.answer)",
							"const plainTextAnswer = markdownToPlainText(sanitizedMarkdown);",
							"",
							"pm.collectionVariables.set(\"agent_response\", plainTextAnswer);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"content\":\"{{mock_user_message}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{movie-guru-server}}/chat",
					"protocol": "http",
					"host": [
						"{{movie-guru-server}}"
					],
					"path": [
						"chat"
					]
				}
			},
			"response": []
		},
		{
			"name": "clearHistoryEnd",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{movie-guru-server}}/history",
					"protocol": "http",
					"host": [
						"{{movie-guru-server}}"
					],
					"path": [
						"history"
					]
				}
			},
			"response": []
		},
		{
			"name": "logout",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "user",
						"value": "{{user}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://{{movie-guru-server}}/logout",
					"protocol": "http",
					"host": [
						"{{movie-guru-server}}"
					],
					"path": [
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "mock_user_message",
			"value": "",
			"type": "default"
		}
	]
}